// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/example/com/aircraft/v1/aircraft_seats_service.proto

package aircraftv1connect

import (
	v1 "aircraft-seats-service-go/internal/gen/proto/example/com/aircraft/v1"
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AircraftSeatsServiceName is the fully-qualified name of the AircraftSeatsService service.
	AircraftSeatsServiceName = "example.com.aircraft.v1.AircraftSeatsService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AircraftSeatsServiceGetSeatStatusProcedure is the fully-qualified name of the
	// AircraftSeatsService's GetSeatStatus RPC.
	AircraftSeatsServiceGetSeatStatusProcedure = "/example.com.aircraft.v1.AircraftSeatsService/GetSeatStatus"
	// AircraftSeatsServiceUpdateSeatStatusProcedure is the fully-qualified name of the
	// AircraftSeatsService's UpdateSeatStatus RPC.
	AircraftSeatsServiceUpdateSeatStatusProcedure = "/example.com.aircraft.v1.AircraftSeatsService/UpdateSeatStatus"
	// AircraftSeatsServiceSubscribeToSeatStatusUpdatesProcedure is the fully-qualified name of the
	// AircraftSeatsService's SubscribeToSeatStatusUpdates RPC.
	AircraftSeatsServiceSubscribeToSeatStatusUpdatesProcedure = "/example.com.aircraft.v1.AircraftSeatsService/SubscribeToSeatStatusUpdates"
)

// AircraftSeatsServiceClient is a client for the example.com.aircraft.v1.AircraftSeatsService
// service.
type AircraftSeatsServiceClient interface {
	// Fetches the status of a specific seat based on row number and seat letter.
	GetSeatStatus(context.Context, *connect.Request[v1.SeatStatusRequest]) (*connect.Response[v1.SeatStatusResponse], error)
	// Updates the status of a specific seat (occupied or not) based on row number and seat letter.
	UpdateSeatStatus(context.Context, *connect.Request[v1.UpdateSeatStatusRequest]) (*connect.Response[v1.UpdateSeatStatusResponse], error)
	// Subscribes to real-time updates for seat statuses. Streams updates as they occur.
	SubscribeToSeatStatusUpdates(context.Context, *connect.Request[v1.SeatStatusSubscriptionRequest]) (*connect.ServerStreamForClient[v1.SeatStatus], error)
}

// NewAircraftSeatsServiceClient constructs a client for the
// example.com.aircraft.v1.AircraftSeatsService service. By default, it uses the Connect protocol
// with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To
// use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb()
// options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAircraftSeatsServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AircraftSeatsServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	aircraftSeatsServiceMethods := v1.File_proto_example_com_aircraft_v1_aircraft_seats_service_proto.Services().ByName("AircraftSeatsService").Methods()
	return &aircraftSeatsServiceClient{
		getSeatStatus: connect.NewClient[v1.SeatStatusRequest, v1.SeatStatusResponse](
			httpClient,
			baseURL+AircraftSeatsServiceGetSeatStatusProcedure,
			connect.WithSchema(aircraftSeatsServiceMethods.ByName("GetSeatStatus")),
			connect.WithClientOptions(opts...),
		),
		updateSeatStatus: connect.NewClient[v1.UpdateSeatStatusRequest, v1.UpdateSeatStatusResponse](
			httpClient,
			baseURL+AircraftSeatsServiceUpdateSeatStatusProcedure,
			connect.WithSchema(aircraftSeatsServiceMethods.ByName("UpdateSeatStatus")),
			connect.WithClientOptions(opts...),
		),
		subscribeToSeatStatusUpdates: connect.NewClient[v1.SeatStatusSubscriptionRequest, v1.SeatStatus](
			httpClient,
			baseURL+AircraftSeatsServiceSubscribeToSeatStatusUpdatesProcedure,
			connect.WithSchema(aircraftSeatsServiceMethods.ByName("SubscribeToSeatStatusUpdates")),
			connect.WithClientOptions(opts...),
		),
	}
}

// aircraftSeatsServiceClient implements AircraftSeatsServiceClient.
type aircraftSeatsServiceClient struct {
	getSeatStatus                *connect.Client[v1.SeatStatusRequest, v1.SeatStatusResponse]
	updateSeatStatus             *connect.Client[v1.UpdateSeatStatusRequest, v1.UpdateSeatStatusResponse]
	subscribeToSeatStatusUpdates *connect.Client[v1.SeatStatusSubscriptionRequest, v1.SeatStatus]
}

// GetSeatStatus calls example.com.aircraft.v1.AircraftSeatsService.GetSeatStatus.
func (c *aircraftSeatsServiceClient) GetSeatStatus(ctx context.Context, req *connect.Request[v1.SeatStatusRequest]) (*connect.Response[v1.SeatStatusResponse], error) {
	return c.getSeatStatus.CallUnary(ctx, req)
}

// UpdateSeatStatus calls example.com.aircraft.v1.AircraftSeatsService.UpdateSeatStatus.
func (c *aircraftSeatsServiceClient) UpdateSeatStatus(ctx context.Context, req *connect.Request[v1.UpdateSeatStatusRequest]) (*connect.Response[v1.UpdateSeatStatusResponse], error) {
	return c.updateSeatStatus.CallUnary(ctx, req)
}

// SubscribeToSeatStatusUpdates calls
// example.com.aircraft.v1.AircraftSeatsService.SubscribeToSeatStatusUpdates.
func (c *aircraftSeatsServiceClient) SubscribeToSeatStatusUpdates(ctx context.Context, req *connect.Request[v1.SeatStatusSubscriptionRequest]) (*connect.ServerStreamForClient[v1.SeatStatus], error) {
	return c.subscribeToSeatStatusUpdates.CallServerStream(ctx, req)
}

// AircraftSeatsServiceHandler is an implementation of the
// example.com.aircraft.v1.AircraftSeatsService service.
type AircraftSeatsServiceHandler interface {
	// Fetches the status of a specific seat based on row number and seat letter.
	GetSeatStatus(context.Context, *connect.Request[v1.SeatStatusRequest]) (*connect.Response[v1.SeatStatusResponse], error)
	// Updates the status of a specific seat (occupied or not) based on row number and seat letter.
	UpdateSeatStatus(context.Context, *connect.Request[v1.UpdateSeatStatusRequest]) (*connect.Response[v1.UpdateSeatStatusResponse], error)
	// Subscribes to real-time updates for seat statuses. Streams updates as they occur.
	SubscribeToSeatStatusUpdates(context.Context, *connect.Request[v1.SeatStatusSubscriptionRequest], *connect.ServerStream[v1.SeatStatus]) error
}

// NewAircraftSeatsServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAircraftSeatsServiceHandler(svc AircraftSeatsServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	aircraftSeatsServiceMethods := v1.File_proto_example_com_aircraft_v1_aircraft_seats_service_proto.Services().ByName("AircraftSeatsService").Methods()
	aircraftSeatsServiceGetSeatStatusHandler := connect.NewUnaryHandler(
		AircraftSeatsServiceGetSeatStatusProcedure,
		svc.GetSeatStatus,
		connect.WithSchema(aircraftSeatsServiceMethods.ByName("GetSeatStatus")),
		connect.WithHandlerOptions(opts...),
	)
	aircraftSeatsServiceUpdateSeatStatusHandler := connect.NewUnaryHandler(
		AircraftSeatsServiceUpdateSeatStatusProcedure,
		svc.UpdateSeatStatus,
		connect.WithSchema(aircraftSeatsServiceMethods.ByName("UpdateSeatStatus")),
		connect.WithHandlerOptions(opts...),
	)
	aircraftSeatsServiceSubscribeToSeatStatusUpdatesHandler := connect.NewServerStreamHandler(
		AircraftSeatsServiceSubscribeToSeatStatusUpdatesProcedure,
		svc.SubscribeToSeatStatusUpdates,
		connect.WithSchema(aircraftSeatsServiceMethods.ByName("SubscribeToSeatStatusUpdates")),
		connect.WithHandlerOptions(opts...),
	)
	return "/example.com.aircraft.v1.AircraftSeatsService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AircraftSeatsServiceGetSeatStatusProcedure:
			aircraftSeatsServiceGetSeatStatusHandler.ServeHTTP(w, r)
		case AircraftSeatsServiceUpdateSeatStatusProcedure:
			aircraftSeatsServiceUpdateSeatStatusHandler.ServeHTTP(w, r)
		case AircraftSeatsServiceSubscribeToSeatStatusUpdatesProcedure:
			aircraftSeatsServiceSubscribeToSeatStatusUpdatesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAircraftSeatsServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAircraftSeatsServiceHandler struct{}

func (UnimplementedAircraftSeatsServiceHandler) GetSeatStatus(context.Context, *connect.Request[v1.SeatStatusRequest]) (*connect.Response[v1.SeatStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("example.com.aircraft.v1.AircraftSeatsService.GetSeatStatus is not implemented"))
}

func (UnimplementedAircraftSeatsServiceHandler) UpdateSeatStatus(context.Context, *connect.Request[v1.UpdateSeatStatusRequest]) (*connect.Response[v1.UpdateSeatStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("example.com.aircraft.v1.AircraftSeatsService.UpdateSeatStatus is not implemented"))
}

func (UnimplementedAircraftSeatsServiceHandler) SubscribeToSeatStatusUpdates(context.Context, *connect.Request[v1.SeatStatusSubscriptionRequest], *connect.ServerStream[v1.SeatStatus]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("example.com.aircraft.v1.AircraftSeatsService.SubscribeToSeatStatusUpdates is not implemented"))
}
