package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.73

import (
	"context"
	"fmt"
	"go-graphql-gateway/client"
	"go-graphql-gateway/graph/model"
	"go-graphql-gateway/internal/gen/proto/example/com/aircraft/v1/aircraftv1connect"
	v1 "go-graphql-gateway/internal/gen/proto/example/com/aircraft/v1"
	"log"
	"net/http"
	"connectrpc.com/connect"
)

func AircraftSeatsServiceClientFactory(client *http.Client, url string) aircraftv1connect.AircraftSeatsServiceClient {
	return aircraftv1connect.NewAircraftSeatsServiceClient(client, url, connect.WithGRPC())
}

// UpdateSeatStatus is the resolver for the updateSeatStatus field.
func (r *mutationResolver) UpdateSeatStatus(ctx context.Context, rowNumber int32, seatLetter *string, occupied bool) (*bool, error) {
	
	grpcClient := client.NewGRPCClient(true, AircraftSeatsServiceClientFactory)
	
	var reqBody = &v1.UpdateSeatStatusRequest{RowNumber: rowNumber, SeatLetter: *seatLetter, Occupied: occupied}

	resp, err := grpcClient.UpdateSeatStatus(context.Background(), connect.NewRequest(reqBody));
	
	if err != nil {
		log.Fatalf("error: %s", err)
	}
	log.Println("recv: ", resp.Msg)
    
	updatedStatus := resp.Msg 

	return &updatedStatus.Success, nil
	
}

// Ping is the resolver for the ping field.
func (r *queryResolver) Ping(ctx context.Context) (*string, error) {
	msg := "pong"
	return &msg, nil
}

// SeatStatus is the resolver for the seatStatus field.
func (r *queryResolver) SeatStatus(ctx context.Context, rowNumber int32, seatLetter string) (*model.SeatStatus, error) {

	grpcClient := client.NewGRPCClient(true, AircraftSeatsServiceClientFactory)

	var reqBody = &v1.SeatStatusRequest{RowNumber: rowNumber, SeatLetter: seatLetter}

	resp, err := grpcClient.GetSeatStatus(context.Background(), connect.NewRequest(reqBody));

	if err != nil {
		log.Fatalf("error: %s", err)
	}
	log.Println("recv: ", resp.Msg)
    
	seatStatusResponse := resp.Msg 
	
	
	return &model.SeatStatus{
		RowNumber:  seatStatusResponse.GetRowNumber(),
		SeatLetter: seatStatusResponse.GetSeatLetter(),
		Occupied:   seatStatusResponse.GetOccupied(),
	}, nil
	
	
}


func (r *subscriptionResolver) SeatStatusUpdated(ctx context.Context) (<-chan *model.SeatStatus, error) {
    grpcClient := client.NewGRPCClient(true, AircraftSeatsServiceClientFactory)
    reqBody := &v1.SeatStatusSubscriptionRequest{}

    stream, err := grpcClient.SubscribeToSeatStatusUpdates(ctx, connect.NewRequest(reqBody))
    if err != nil {
        return nil, fmt.Errorf("failed to subscribe to seat status updates: %w", err)
    }

    updates := make(chan *model.SeatStatus)

    go func() {
        defer close(updates)

        for stream.Receive() {
            msg := stream.Msg()
            if msg == nil {
                continue
            }
            select {
            case updates <- convertToGqlModel(msg):
            case <-ctx.Done():
                return
            }
        }

        if err := stream.Err(); err != nil {
            fmt.Printf("Stream closed with error: %v\n", err)
        }
    }()

    return updates, nil
}

func convertToGqlModel(grpcMsg *v1.SeatStatus) *model.SeatStatus {
  	return &model.SeatStatus{
		RowNumber:  grpcMsg.GetRowNumber(),
		SeatLetter: grpcMsg.GetSeatLetter(),
		Occupied:   grpcMsg.GetOccupied(),
	}
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
